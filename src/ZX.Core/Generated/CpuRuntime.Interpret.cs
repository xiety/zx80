//This file is autogenerated, do not change it
#pragma warning disable CS0168 // Variable is declared but never used
#pragma warning disable CS0162 // Unreachable code detected
namespace ZX.Core.Cpu;

public partial class CpuRuntime
{
    private (int, string) Interpret()
    {
        bool isFast; //cannot be declared inside multiple switch cases
        var op = ReadByteOpcode();

        switch (op)
        {
            case 0x00:
                Nop();
                return (4, "nop");
            case 0x01:
                Ld(ref reg.BC, ReadUShortOpcode());
                return (10, "ld bc,nn");
            case 0x02:
                Ld(ref GetByteMemoryRef(reg.BC), reg.A);
                return (7, "ld (bc),a");
            case 0x03:
                Inc(ref reg.BC);
                return (6, "inc bc");
            case 0x04:
                Inc(ref reg.B);
                return (4, "inc b");
            case 0x05:
                Dec(ref reg.B);
                return (4, "dec b");
            case 0x06:
                Ld(ref reg.B, ReadByteOpcode());
                return (7, "ld b,n");
            case 0x07:
                Rlca();
                return (4, "rlca");
            case 0x08:
                Ex(ref reg.AF, ref reg.AFs);
                return (4, "ex af,af'");
            case 0x09:
                Add(ref reg.HL, reg.BC);
                return (11, "add hl,bc");
            case 0x0A:
                Ld(ref reg.A, GetByteMemory(reg.BC));
                return (7, "ld a,(bc)");
            case 0x0B:
                Dec(ref reg.BC);
                return (6, "dec bc");
            case 0x0C:
                Inc(ref reg.C);
                return (4, "inc c");
            case 0x0D:
                Dec(ref reg.C);
                return (4, "dec c");
            case 0x0E:
                Ld(ref reg.C, ReadByteOpcode());
                return (7, "ld c,n");
            case 0x0F:
                Rrca();
                return (4, "rrca");
            case 0x10:
                isFast = Djnz();
                return (isFast ? 8 : 13, "djnz d");
            case 0x11:
                Ld(ref reg.DE, ReadUShortOpcode());
                return (10, "ld de,nn");
            case 0x12:
                Ld(ref GetByteMemoryRef(reg.DE), reg.A);
                return (7, "ld (de),a");
            case 0x13:
                Inc(ref reg.DE);
                return (6, "inc de");
            case 0x14:
                Inc(ref reg.D);
                return (4, "inc d");
            case 0x15:
                Dec(ref reg.D);
                return (4, "dec d");
            case 0x16:
                Ld(ref reg.D, ReadByteOpcode());
                return (7, "ld d,n");
            case 0x17:
                Rla();
                return (4, "rla");
            case 0x18:
                Jr();
                return (12, "jr d");
            case 0x19:
                Add(ref reg.HL, reg.DE);
                return (11, "add hl,de");
            case 0x1A:
                Ld(ref reg.A, GetByteMemory(reg.DE));
                return (7, "ld a,(de)");
            case 0x1B:
                Dec(ref reg.DE);
                return (6, "dec de");
            case 0x1C:
                Inc(ref reg.E);
                return (4, "inc e");
            case 0x1D:
                Dec(ref reg.E);
                return (4, "dec e");
            case 0x1E:
                Ld(ref reg.E, ReadByteOpcode());
                return (7, "ld e,n");
            case 0x1F:
                Rra();
                return (4, "rra");
            case 0x20:
                isFast = Jr(flag.Z == false);
                return (isFast ? 7 : 12, "jr nz,d");
            case 0x21:
                Ld(ref reg.HL, ReadUShortOpcode());
                return (10, "ld hl,nn");
            case 0x22:
                Ld(ref GetUShortMemoryRef(ReadUShortOpcode()), reg.HL);
                return (16, "ld (nn),hl");
            case 0x23:
                Inc(ref reg.HL);
                return (6, "inc hl");
            case 0x24:
                Inc(ref reg.H);
                return (4, "inc h");
            case 0x25:
                Dec(ref reg.H);
                return (4, "dec h");
            case 0x26:
                Ld(ref reg.H, ReadByteOpcode());
                return (7, "ld h,n");
            case 0x27:
                Daa();
                return (4, "daa");
            case 0x28:
                isFast = Jr(flag.Z == true);
                return (isFast ? 7 : 12, "jr z,d");
            case 0x29:
                Add(ref reg.HL, reg.HL);
                return (11, "add hl,hl");
            case 0x2A:
                Ld(ref reg.HL, GetUShortMemory(ReadUShortOpcode()));
                return (16, "ld hl,(nn)");
            case 0x2B:
                Dec(ref reg.HL);
                return (6, "dec hl");
            case 0x2C:
                Inc(ref reg.L);
                return (4, "inc l");
            case 0x2D:
                Dec(ref reg.L);
                return (4, "dec l");
            case 0x2E:
                Ld(ref reg.L, ReadByteOpcode());
                return (7, "ld l,n");
            case 0x2F:
                Cpl();
                return (4, "cpl");
            case 0x30:
                isFast = Jr(flag.C == false);
                return (isFast ? 7 : 12, "jr nc,d");
            case 0x31:
                Ld(ref reg.SP, ReadUShortOpcode());
                return (10, "ld sp,nn");
            case 0x32:
                Ld(ref GetByteMemoryRef(ReadUShortOpcode()), reg.A);
                return (13, "ld (nn),a");
            case 0x33:
                Inc(ref reg.SP);
                return (6, "inc sp");
            case 0x34:
                Inc(ref GetByteMemoryRef(reg.HL));
                return (11, "inc (hl)");
            case 0x35:
                Dec(ref GetByteMemoryRef(reg.HL));
                return (11, "dec (hl)");
            case 0x36:
                Ld(ref GetByteMemoryRef(reg.HL), ReadByteOpcode());
                return (10, "ld (hl),n");
            case 0x37:
                Scf();
                return (4, "scf");
            case 0x38:
                isFast = Jr(flag.C == true);
                return (isFast ? 7 : 12, "jr c,d");
            case 0x39:
                Add(ref reg.HL, reg.SP);
                return (11, "add hl,sp");
            case 0x3A:
                Ld(ref reg.A, GetByteMemory(ReadUShortOpcode()));
                return (13, "ld a,(nn)");
            case 0x3B:
                Dec(ref reg.SP);
                return (6, "dec sp");
            case 0x3C:
                Inc(ref reg.A);
                return (4, "inc a");
            case 0x3D:
                Dec(ref reg.A);
                return (4, "dec a");
            case 0x3E:
                Ld(ref reg.A, ReadByteOpcode());
                return (7, "ld a,n");
            case 0x3F:
                Ccf();
                return (4, "ccf");
            case 0x40:
                Ld(ref reg.B, reg.B);
                return (4, "ld b,b");
            case 0x41:
                Ld(ref reg.B, reg.C);
                return (4, "ld b,c");
            case 0x42:
                Ld(ref reg.B, reg.D);
                return (4, "ld b,d");
            case 0x43:
                Ld(ref reg.B, reg.E);
                return (4, "ld b,e");
            case 0x44:
                Ld(ref reg.B, reg.H);
                return (4, "ld b,h");
            case 0x45:
                Ld(ref reg.B, reg.L);
                return (4, "ld b,l");
            case 0x46:
                Ld(ref reg.B, GetByteMemory(reg.HL));
                return (7, "ld b,(hl)");
            case 0x47:
                Ld(ref reg.B, reg.A);
                return (4, "ld b,a");
            case 0x48:
                Ld(ref reg.C, reg.B);
                return (4, "ld c,b");
            case 0x49:
                Ld(ref reg.C, reg.C);
                return (4, "ld c,c");
            case 0x4A:
                Ld(ref reg.C, reg.D);
                return (4, "ld c,d");
            case 0x4B:
                Ld(ref reg.C, reg.E);
                return (4, "ld c,e");
            case 0x4C:
                Ld(ref reg.C, reg.H);
                return (4, "ld c,h");
            case 0x4D:
                Ld(ref reg.C, reg.L);
                return (4, "ld c,l");
            case 0x4E:
                Ld(ref reg.C, GetByteMemory(reg.HL));
                return (7, "ld c,(hl)");
            case 0x4F:
                Ld(ref reg.C, reg.A);
                return (4, "ld c,a");
            case 0x50:
                Ld(ref reg.D, reg.B);
                return (4, "ld d,b");
            case 0x51:
                Ld(ref reg.D, reg.C);
                return (4, "ld d,c");
            case 0x52:
                Ld(ref reg.D, reg.D);
                return (4, "ld d,d");
            case 0x53:
                Ld(ref reg.D, reg.E);
                return (4, "ld d,e");
            case 0x54:
                Ld(ref reg.D, reg.H);
                return (4, "ld d,h");
            case 0x55:
                Ld(ref reg.D, reg.L);
                return (4, "ld d,l");
            case 0x56:
                Ld(ref reg.D, GetByteMemory(reg.HL));
                return (7, "ld d,(hl)");
            case 0x57:
                Ld(ref reg.D, reg.A);
                return (4, "ld d,a");
            case 0x58:
                Ld(ref reg.E, reg.B);
                return (4, "ld e,b");
            case 0x59:
                Ld(ref reg.E, reg.C);
                return (4, "ld e,c");
            case 0x5A:
                Ld(ref reg.E, reg.D);
                return (4, "ld e,d");
            case 0x5B:
                Ld(ref reg.E, reg.E);
                return (4, "ld e,e");
            case 0x5C:
                Ld(ref reg.E, reg.H);
                return (4, "ld e,h");
            case 0x5D:
                Ld(ref reg.E, reg.L);
                return (4, "ld e,l");
            case 0x5E:
                Ld(ref reg.E, GetByteMemory(reg.HL));
                return (7, "ld e,(hl)");
            case 0x5F:
                Ld(ref reg.E, reg.A);
                return (4, "ld e,a");
            case 0x60:
                Ld(ref reg.H, reg.B);
                return (4, "ld h,b");
            case 0x61:
                Ld(ref reg.H, reg.C);
                return (4, "ld h,c");
            case 0x62:
                Ld(ref reg.H, reg.D);
                return (4, "ld h,d");
            case 0x63:
                Ld(ref reg.H, reg.E);
                return (4, "ld h,e");
            case 0x64:
                Ld(ref reg.H, reg.H);
                return (4, "ld h,h");
            case 0x65:
                Ld(ref reg.H, reg.L);
                return (4, "ld h,l");
            case 0x66:
                Ld(ref reg.H, GetByteMemory(reg.HL));
                return (7, "ld h,(hl)");
            case 0x67:
                Ld(ref reg.H, reg.A);
                return (4, "ld h,a");
            case 0x68:
                Ld(ref reg.L, reg.B);
                return (4, "ld l,b");
            case 0x69:
                Ld(ref reg.L, reg.C);
                return (4, "ld l,c");
            case 0x6A:
                Ld(ref reg.L, reg.D);
                return (4, "ld l,d");
            case 0x6B:
                Ld(ref reg.L, reg.E);
                return (4, "ld l,e");
            case 0x6C:
                Ld(ref reg.L, reg.H);
                return (4, "ld l,h");
            case 0x6D:
                Ld(ref reg.L, reg.L);
                return (4, "ld l,l");
            case 0x6E:
                Ld(ref reg.L, GetByteMemory(reg.HL));
                return (7, "ld l,(hl)");
            case 0x6F:
                Ld(ref reg.L, reg.A);
                return (4, "ld l,a");
            case 0x70:
                Ld(ref GetByteMemoryRef(reg.HL), reg.B);
                return (7, "ld (hl),b");
            case 0x71:
                Ld(ref GetByteMemoryRef(reg.HL), reg.C);
                return (7, "ld (hl),c");
            case 0x72:
                Ld(ref GetByteMemoryRef(reg.HL), reg.D);
                return (7, "ld (hl),d");
            case 0x73:
                Ld(ref GetByteMemoryRef(reg.HL), reg.E);
                return (7, "ld (hl),e");
            case 0x74:
                Ld(ref GetByteMemoryRef(reg.HL), reg.H);
                return (7, "ld (hl),h");
            case 0x75:
                Ld(ref GetByteMemoryRef(reg.HL), reg.L);
                return (7, "ld (hl),l");
            case 0x76:
                Halt();
                return (4, "halt");
            case 0x77:
                Ld(ref GetByteMemoryRef(reg.HL), reg.A);
                return (7, "ld (hl),a");
            case 0x78:
                Ld(ref reg.A, reg.B);
                return (4, "ld a,b");
            case 0x79:
                Ld(ref reg.A, reg.C);
                return (4, "ld a,c");
            case 0x7A:
                Ld(ref reg.A, reg.D);
                return (4, "ld a,d");
            case 0x7B:
                Ld(ref reg.A, reg.E);
                return (4, "ld a,e");
            case 0x7C:
                Ld(ref reg.A, reg.H);
                return (4, "ld a,h");
            case 0x7D:
                Ld(ref reg.A, reg.L);
                return (4, "ld a,l");
            case 0x7E:
                Ld(ref reg.A, GetByteMemory(reg.HL));
                return (7, "ld a,(hl)");
            case 0x7F:
                Ld(ref reg.A, reg.A);
                return (4, "ld a,a");
            case 0x80:
                Add(ref reg.A, reg.B);
                return (4, "add a,b");
            case 0x81:
                Add(ref reg.A, reg.C);
                return (4, "add a,c");
            case 0x82:
                Add(ref reg.A, reg.D);
                return (4, "add a,d");
            case 0x83:
                Add(ref reg.A, reg.E);
                return (4, "add a,e");
            case 0x84:
                Add(ref reg.A, reg.H);
                return (4, "add a,h");
            case 0x85:
                Add(ref reg.A, reg.L);
                return (4, "add a,l");
            case 0x86:
                Add(ref reg.A, GetByteMemory(reg.HL));
                return (7, "add a,(hl)");
            case 0x87:
                Add(ref reg.A, reg.A);
                return (4, "add a,a");
            case 0x88:
                Adc(ref reg.A, reg.B);
                return (4, "adc a,b");
            case 0x89:
                Adc(ref reg.A, reg.C);
                return (4, "adc a,c");
            case 0x8A:
                Adc(ref reg.A, reg.D);
                return (4, "adc a,d");
            case 0x8B:
                Adc(ref reg.A, reg.E);
                return (4, "adc a,e");
            case 0x8C:
                Adc(ref reg.A, reg.H);
                return (4, "adc a,h");
            case 0x8D:
                Adc(ref reg.A, reg.L);
                return (4, "adc a,l");
            case 0x8E:
                Adc(ref reg.A, GetByteMemory(reg.HL));
                return (7, "adc a,(hl)");
            case 0x8F:
                Adc(ref reg.A, reg.A);
                return (4, "adc a,a");
            case 0x90:
                Sub(reg.B);
                return (4, "sub b");
            case 0x91:
                Sub(reg.C);
                return (4, "sub c");
            case 0x92:
                Sub(reg.D);
                return (4, "sub d");
            case 0x93:
                Sub(reg.E);
                return (4, "sub e");
            case 0x94:
                Sub(reg.H);
                return (4, "sub h");
            case 0x95:
                Sub(reg.L);
                return (4, "sub l");
            case 0x96:
                Sub(GetByteMemory(reg.HL));
                return (7, "sub (hl)");
            case 0x97:
                Sub(reg.A);
                return (4, "sub a");
            case 0x98:
                Sbc(ref reg.A, reg.B);
                return (4, "sbc a,b");
            case 0x99:
                Sbc(ref reg.A, reg.C);
                return (4, "sbc a,c");
            case 0x9A:
                Sbc(ref reg.A, reg.D);
                return (4, "sbc a,d");
            case 0x9B:
                Sbc(ref reg.A, reg.E);
                return (4, "sbc a,e");
            case 0x9C:
                Sbc(ref reg.A, reg.H);
                return (4, "sbc a,h");
            case 0x9D:
                Sbc(ref reg.A, reg.L);
                return (4, "sbc a,l");
            case 0x9E:
                Sbc(ref reg.A, GetByteMemory(reg.HL));
                return (7, "sbc a,(hl)");
            case 0x9F:
                Sbc(ref reg.A, reg.A);
                return (4, "sbc a,a");
            case 0xA0:
                And(reg.B);
                return (4, "and b");
            case 0xA1:
                And(reg.C);
                return (4, "and c");
            case 0xA2:
                And(reg.D);
                return (4, "and d");
            case 0xA3:
                And(reg.E);
                return (4, "and e");
            case 0xA4:
                And(reg.H);
                return (4, "and h");
            case 0xA5:
                And(reg.L);
                return (4, "and l");
            case 0xA6:
                And(GetByteMemory(reg.HL));
                return (7, "and (hl)");
            case 0xA7:
                And(reg.A);
                return (4, "and a");
            case 0xA8:
                Xor(reg.B);
                return (4, "xor b");
            case 0xA9:
                Xor(reg.C);
                return (4, "xor c");
            case 0xAA:
                Xor(reg.D);
                return (4, "xor d");
            case 0xAB:
                Xor(reg.E);
                return (4, "xor e");
            case 0xAC:
                Xor(reg.H);
                return (4, "xor h");
            case 0xAD:
                Xor(reg.L);
                return (4, "xor l");
            case 0xAE:
                Xor(GetByteMemory(reg.HL));
                return (7, "xor (hl)");
            case 0xAF:
                Xor(reg.A);
                return (4, "xor a");
            case 0xB0:
                Or(reg.B);
                return (4, "or b");
            case 0xB1:
                Or(reg.C);
                return (4, "or c");
            case 0xB2:
                Or(reg.D);
                return (4, "or d");
            case 0xB3:
                Or(reg.E);
                return (4, "or e");
            case 0xB4:
                Or(reg.H);
                return (4, "or h");
            case 0xB5:
                Or(reg.L);
                return (4, "or l");
            case 0xB6:
                Or(GetByteMemory(reg.HL));
                return (7, "or (hl)");
            case 0xB7:
                Or(reg.A);
                return (4, "or a");
            case 0xB8:
                Cp(reg.B);
                return (4, "cp b");
            case 0xB9:
                Cp(reg.C);
                return (4, "cp c");
            case 0xBA:
                Cp(reg.D);
                return (4, "cp d");
            case 0xBB:
                Cp(reg.E);
                return (4, "cp e");
            case 0xBC:
                Cp(reg.H);
                return (4, "cp h");
            case 0xBD:
                Cp(reg.L);
                return (4, "cp l");
            case 0xBE:
                Cp(GetByteMemory(reg.HL));
                return (7, "cp (hl)");
            case 0xBF:
                Cp(reg.A);
                return (4, "cp a");
            case 0xC0:
                isFast = Ret(flag.Z == false);
                return (isFast ? 5 : 11, "ret nz");
            case 0xC1:
                Pop(ref reg.BC);
                return (10, "pop bc");
            case 0xC2:
                Jp(flag.Z == false);
                return (10, "jp nz,nn");
            case 0xC3:
                Jp();
                return (10, "jp nn");
            case 0xC4:
                isFast = Call(flag.Z == false);
                return (isFast ? 10 : 17, "call nz,nn");
            case 0xC5:
                Push(reg.BC);
                return (11, "push bc");
            case 0xC6:
                Add(ref reg.A, ReadByteOpcode());
                return (7, "add a,n");
            case 0xC7:
                Rst(0x00);
                return (11, "rst 00h");
            case 0xC8:
                isFast = Ret(flag.Z == true);
                return (isFast ? 5 : 11, "ret z");
            case 0xC9:
                Ret();
                return (10, "ret");
            case 0xCA:
                Jp(flag.Z == true);
                return (10, "jp z,nn");
            case 0xCB:
                return InterpretCB();
            case 0xCC:
                isFast = Call(flag.Z == true);
                return (isFast ? 10 : 17, "call z,nn");
            case 0xCD:
                Call();
                return (17, "call nn");
            case 0xCE:
                Adc(ref reg.A, ReadByteOpcode());
                return (7, "adc a,n");
            case 0xCF:
                Rst(0x08);
                return (11, "rst 08h");
            case 0xD0:
                isFast = Ret(flag.C == false);
                return (isFast ? 5 : 11, "ret nc");
            case 0xD1:
                Pop(ref reg.DE);
                return (10, "pop de");
            case 0xD2:
                Jp(flag.C == false);
                return (10, "jp nc,nn");
            case 0xD3:
                Out(ReadByteOpcode(), reg.A);
                return (11, "out (n),a");
            case 0xD4:
                isFast = Call(flag.C == false);
                return (isFast ? 10 : 17, "call nc,nn");
            case 0xD5:
                Push(reg.DE);
                return (11, "push de");
            case 0xD6:
                Sub(ReadByteOpcode());
                return (7, "sub n");
            case 0xD7:
                Rst(0x10);
                return (11, "rst 10h");
            case 0xD8:
                isFast = Ret(flag.C == true);
                return (isFast ? 5 : 11, "ret c");
            case 0xD9:
                Exx();
                return (4, "exx");
            case 0xDA:
                Jp(flag.C == true);
                return (10, "jp c,nn");
            case 0xDB:
                In(ref reg.A, ReadByteOpcode());
                return (11, "in a,(n)");
            case 0xDC:
                isFast = Call(flag.C == true);
                return (isFast ? 10 : 17, "call c,nn");
            case 0xDD:
                return InterpretDD();
            case 0xDE:
                Sbc(ref reg.A, ReadByteOpcode());
                return (7, "sbc a,n");
            case 0xDF:
                Rst(0x18);
                return (11, "rst 18h");
            case 0xE0:
                isFast = Ret(flag.P == false);
                return (isFast ? 5 : 11, "ret po");
            case 0xE1:
                Pop(ref reg.HL);
                return (10, "pop hl");
            case 0xE2:
                Jp(flag.P == false);
                return (10, "jp po,nn");
            case 0xE3:
                Ex(ref GetUShortMemoryRef(reg.SP), ref reg.HL);
                return (19, "ex (sp),hl");
            case 0xE4:
                isFast = Call(flag.P == false);
                return (isFast ? 10 : 17, "call po,nn");
            case 0xE5:
                Push(reg.HL);
                return (11, "push hl");
            case 0xE6:
                And(ReadByteOpcode());
                return (7, "and n");
            case 0xE7:
                Rst(0x20);
                return (11, "rst 20h");
            case 0xE8:
                isFast = Ret(flag.P == true);
                return (isFast ? 5 : 11, "ret pe");
            case 0xE9:
                Jp(reg.HL);
                return (4, "jp hl");
            case 0xEA:
                Jp(flag.P == true);
                return (10, "jp pe,nn");
            case 0xEB:
                Ex(ref reg.DE, ref reg.HL);
                return (4, "ex de,hl");
            case 0xEC:
                isFast = Call(flag.P == true);
                return (isFast ? 10 : 17, "call pe,nn");
            case 0xED:
                return InterpretED();
            case 0xEE:
                Xor(ReadByteOpcode());
                return (7, "xor n");
            case 0xEF:
                Rst(0x28);
                return (11, "rst 28h");
            case 0xF0:
                isFast = Ret(flag.S == false);
                return (isFast ? 5 : 11, "ret p");
            case 0xF1:
                Pop(ref reg.AF);
                return (10, "pop af");
            case 0xF2:
                Jp(flag.S == false);
                return (10, "jp p,nn");
            case 0xF3:
                Di();
                return (4, "di");
            case 0xF4:
                isFast = Call(flag.S == false);
                return (isFast ? 10 : 17, "call p,nn");
            case 0xF5:
                Push(reg.AF);
                return (11, "push af");
            case 0xF6:
                Or(ReadByteOpcode());
                return (7, "or n");
            case 0xF7:
                Rst(0x30);
                return (11, "rst 30h");
            case 0xF8:
                isFast = Ret(flag.S == true);
                return (isFast ? 5 : 11, "ret m");
            case 0xF9:
                Ld(ref reg.SP, reg.HL);
                return (6, "ld sp,hl");
            case 0xFA:
                Jp(flag.S == true);
                return (10, "jp m,nn");
            case 0xFB:
                Ei();
                return (4, "ei");
            case 0xFC:
                isFast = Call(flag.S == true);
                return (isFast ? 10 : 17, "call m,nn");
            case 0xFD:
                return InterpretFD();
            case 0xFE:
                Cp(ReadByteOpcode());
                return (7, "cp n");
            case 0xFF:
                Rst(0x38);
                return (11, "rst 38h");
            default:
                //throw new Exception($"{op:X2}");
                Console.WriteLine($"{op:X2}");
                return (0, "UNKNOWN");
        }
    }
}
